				CONFORTMED

	Copyright (C) Juan Felipe Restrepo <jf.restrepo.rinckoar@gmail.com>

---------------------------------------------------------------------------------------

Presentation
============

	This program was written in C code and contains all the set of functions
	required for the device to work.
---------------------------------------------------------------------------------------

Files Description
=================
	
The CONFORTMED package contains 8 files.

	1. confortmed.c
		This file contains the main function and the routines to 
		attend the PORTB interruptions (External and RB4-RB7).
	2. confortmed.h
		This file contains all the definition of all the constant 
		values and also the definition of a structure called 
		"_sensor".
	3. manager.c
		This file contains all the routines to attend the different
		system states and also initializes the values of the sensor 
		structure.
	4. control.c
		This file contains the routines to set and control the ADC,
		switch the GLCD between ON and OFF, compute the pressure 
		values and read and write values in the EEPROM.
	5. calibration.c
		This file contains all the routines to execute the system
		calibration and the sensor test.
	6. confortmed_glcd.c
		This file contains the pin definitions and function to
		operate with the GLCD.
	7. Makefile
		File to compile the code in UNIX systems.
	8. UserManual
		User Manual.

confortmed.c
	
	Functions:
		
		* void ext(): attends the RB0 inter. Switch between MAIN_ON and 
			MAIN_PAUSE.
		* void Interrupcion_RB(): attends the RB4-RB7 inter. switch
			between MAIN_ON and MAIN_OFF, change pressure units 
			Kpa/mmHg and enter to the calibration menu.
		* static signed int main_init(): sets the PIC inputs and outputs,
			allocate the sensor structure array, call functions to
			init. the GLCD, the ADC and the sensor array initial 
			values.
		* static void main_error(int er): displays error messages if
			there was something wrong in the init. routine.
		* void main(void): main routine.

manager.c
	
	Functions:
		
		* static int1 set_sensor_values(sensor s): initializes the sensor
			structure values (x,y,rx,ry,oldr,m,b). The values m and b
			are read from the EEPROM memory.
		* int1 manager_init(sensor s): calls the functions to init. the 
			ADC and the sensor structure. 
		* void main_menu(sensor s,unsigned int units): calls the functions
			to read the ADC and print the values in the GLCD.
		* unsigned int calib_menu(sensor s): displays the calibration menu
			and switch between the 2 options (sensor calibration and 
			sensor test).
control.c			
	
	Functions:
		* void set_adc(): sets up the ADC.
		* void get_adc(sensor s): takes the ADC values for all the sensors.
		* float adc_2_pressure(long adc,float m,float b,unsigned int units):
			function to calculate the pressure value using the ADC value,
			the slope and the y-intercept from the calibration curve, 
			the sensing area and a constants to pass from gram-force
			(grf) to Kilo-Pascal (kPa) and from Kpa to millimeters of 
			mercury (mmHg).
		* unsigned int set_lcd(unsigned int mode): switches between MAIN_ON
			and MAIN_OFF states and turn ON and OFF the GLCD.
		* void show_values(sensor s,unsigned int units): prints the graphic
			and numerical pressure values.
		* void read_from_eeprom(sensor s): reads the EEPROM memory.
		* void write_2_eeprom(sensor s,unsigned int index): writes values
			in the EEPROM memory.					 
calibration.c
     
	Functions:	
		* static float counter(float count): increase and decrease the 
			value of the variable "count" used to set the applied load
			during the sensor calibration.
		* static void set_calib_values(sensor s,unsigned int index): sets
			the value of each point (load[i],voltage[i]) to be used 
			in the linear reg. algorithm. 
		* static void linear_reg(sensor s,unsigned int index): calculate
			the calibration curve parameters through a simple linear
			regression and writes the values in the EEPROM memory.
		* void sensor_calibration(sensor s): stars the calibration option,
			calls all the calibration functions.
		* unsigned int test_calib(sensor s): stars the test sensor option.
						     *
confortmed_glcd.c

	Code based on the CCS library HDM64GS12.c

	This file contains drivers for using a Hantronix HDM64GS12 with a KS0108 
	display controller. The HDM64GS12 is 128 by 64 pixels. The driver treats 
	the upper left pixel as (0,0). Use #`define FAST_GLCD if the target chip 
	has at least 1k of RAM to decrease the time it takes to update the 
	display. glcd_update() must then be called to update the display after 
	changing the pixel information. See ex_glcd.c for suggested usage.     

	LCD Pin connections:                                         
	(These can be changed as needed in the following defines).   
	 * 1: VSS is connected to GND                                
	 * 2: VDD is connected to +5V                                
	 * 3: V0  - LCD operating voltage (Constrast adjustment)     
	 * 4: D/I - Data or Instruction is connected to C2           
	 * 5: R/W - Read or Write is connected to C4                 
	 * 6: Enable is connected to C5                              
	 *7-14: Data Bus 0 to 7 is connected to port D               
	 *15: Chip Select 1 is connected to C0                       
	 *16: Chip Select 2 is connected to C1                       
	 *17: Reset is connected to C6                               
	 *18: Negative voltage is also connected to the 20k Ohm POT  
	 *19: Positive voltage for LED back-light is connected to +5V 
	 *20: Negative voltage for LED back-light is connected to GND

	 Functions:

		* glcd_init(mode): must be called before any other function.          
       			Mode can be ON or OFF to turn the LCD on or off.  
                * glcd_pixel(x,y,color): sets the pixel to the given color.          
			Color can be ON or OFF. 				
		* glcd_fillScreen(color): fills the entire LCD with the given 
			color. Color can be ON or OFF.
		* glcd_update(): write the display data stored in RAM to the 
			LCD. Only available if FAST_GLCD is defined.          

---------------------------------------------------------------------------------------

System Navigation
=================

	Buttons:
			1. Pause.  		PORTB.0
			2. On/Off.		PORTB.4
			3. Calibration.		PORTB.5
	Leds: 
			1. Blue.		PORTE.0
			2. Green.		PORTE.1
			3. Red.			PORTE.2
		Note: the Leds turn on when the port pins are set to 0.	

	System States
			1. MAIN_ON.		Green led turned on.
			2. MAIN_OFF.		Red led turned on.	
			3. MAIN_PAUSE.		Blue led turned on.
			4. MAIN_CALIB.		All leds turned on.
	Menus:
		1. Main Menu.
		2. Calibration Menu
			2.1. Test Sensor Menu.
			2.2. Sensor Calibration Menu. 	
		
	When the system is connected to power a intro message is displayed then the display 
	is turned off and the system is set to the MAIN_OFF state.

	When the system is in MAIN_OFF and the on/off button is pressed the device goes to
	the MAIN_ON state and the Main Menu starts.
		
		Main Menu: In this menu the pressure value are read and displayed in the 
			GLCD. 
			
			If button 3 (Calibration) is pressed the pressure unit toggle from
			Kpa to mmHg and vice versa.  

			If button 2 (On/Off) is pressed the system goes to MAIN_OFF state.

			If button 1 (Pause) is pressed the system goes to MAIN_PAUSE state.
			
	When the system is in MAIN_PAUSE mode the GLCD screen is froze.

			If button 2 (On/Off) is pressed the system goes to MAIN_OFF state.

			If button 1 (Pause) is pressed the system goes to MAIN_ON state.

	When the system is in MAIN_OFF mode and the button 3 is pressed the system goes to
	the MAIN_CALIB state and the Calibration Menu is displayed.
		
		Calibration Menu: This menu goes through 2 sub-menus called Sensor Calibration
			and Test Sensor.
		
			When the Calibration Menu is reached an introduction message is showed.

				If button 1 is pressed the sub-menus are toggled.

				If button 2 is pressed the system goes to the sub-menu showed in
				the GLCD screen.

				If button 3 is pressed the system exits the Calibration Menu and
				goes to the MAIN_OFF state.

		Test Sensor Menu: This menu was made to test if the sensors have physically
			changed.

			It compares the load value read when the sensor is totally unloaded 
			with the y-intercept parameter of the calibration curve that is 	
			stored in the EEPROM memory. So, the full scale error is computed
			between these values and a warning is displayed if this error is 
			bigger than MAXERROR (Maximum full scale error allowed).  

			When this menu is reached the message "connect all sensors" is showed.

				If button 2 is pressed the algorithm is executed.

				If button 3 is pressed the system return to the Calibration 
				Menu.
		
		Sensor Calibration: This menu was designed to perform the sensor calibration.

			It performs a simple linear regression using n points (the number of 
			points is set by the NKVAL variable defined in confortmed.h),	
			then the calculated parameters (slope, y-axes inter.) are stored in the
			EEPROM memory.
		
			When this menu is reached the user is asked to choose between calibrate
			a single sensor or all the sensors.

				Use button 1 to choose a single sensor (S1,S2,S3,S4) or all
				the sensors.

				Use button 2 to execute the calibration algorithm on the chose
				option.

				Use button 3 to go back to the Calibration Menu.

			When the sensor is chose the system ask to the user to set the n 
			points (load[i],voltage[i], i=1...n) for the linear regression.

			The voltage value is read from the ADC channel.
			The load value must be introduced by the user using the command
			buttons.

				Use button 1 to increase the load value.
				Use button 2 to decrease the load value.
				Use button 3 to store the (load[i],voltage[i]) point and
				go to set the next point.

			Ones the n points are set, the system perform the linear regression
			and display the results in the GLCD i.e the slope, the y-axes inter.
			and the correlation coefficient.
--------------------------------------------------------------------------------------------------
	2011-04-29  Juan Felipe Restrepo <jf.restrepo.rinckoar@gmail.com>			
